const Enter = document.querySelector('.Enter');
const table = document.querySelector('table');
const form = document.querySelector('.form-container');
const but = document.querySelector('.but');
const generatedBy = document.querySelector("#generatedBy");
const clientName = document.querySelector("#clientName");
const printclient = document.querySelector('.printclient');

function handleEnter() {
    // Check if both fields are filled
    if (generatedBy.value.trim() !== '' && clientName.value.trim() !== '') {
        // Store clientName in local storage
        localStorage.setItem('clientName', clientName.value);

        // Display the client name heading
        const heading = document.querySelector("#clientName");
        heading.textContent = clientName.value;
        heading.style.display = 'block';
        printclient.style.display = 'block';
        // Print client name in printclient in the desired format
        printclient.textContent = `Client Name: ${clientName.value}`;

        // Show table and button, hide form
        table.style.display = 'block';
        but.style.display = 'block';
        form.style.display = 'none';
    } else {
        alert("Please fill in both 'Generated By' and 'Client Name' fields.");
    }
}

// Trigger on button click
Enter.addEventListener('click', handleEnter);

// Display stored client name when the page loads
document.addEventListener('DOMContentLoaded', function() {
    const storedClientName = localStorage.getItem('clientName');
    if (storedClientName) {
        // Print stored client name in the desired format
        printclient.textContent = `Client Name: ${storedClientName}`;
    }
});



// Trigger on Enter key press
document.addEventListener('keydown', (event) => {
    if (event.key === 'Enter') {
        handleEnter();
    }
});

function handleFocus() {
    form.style.backdropFilter = 'blur(15px)';
}

function handleBlur() {
    form.style.backdropFilter = 'blur(5px)';
}

// Attach event listeners
generatedBy.addEventListener('focus', handleFocus);
generatedBy.addEventListener('blur', handleBlur);
clientName.addEventListener('focus', handleFocus);
clientName.addEventListener('blur', handleBlur);


document.addEventListener('mousemove', (e) => {
    const mousex = e.clientX - 20;
    const mousey = e.clientY - 20;
    const circles = document.querySelectorAll(".circle");

    // Check if the mouse is within the screen boundaries
    const isMouseWithinScreen = mousex >= 0 && mousey >= 0 && mousex <= window.innerWidth && mousey <= window.innerHeight;

    circles.forEach(circle => {
        if (isMouseWithinScreen) {
            circle.style.opacity = '1';  // Show the circle

            // Calculate speed based on the change in mouse position
            const speed = Math.sqrt((e.movementX ** 2) + (e.movementY ** 2));

            // Adjust width and height of the circle based on speed
            const diameter = Math.min(100, 40 + speed * 0.5); // Adjust the multiplier to control sensitivity

            // Set width and height to create an elliptical effect
            circle.style.width = `${diameter}px`;
            circle.style.height = `${diameter}px`;

            circle.style.transform = `translate(${mousex}px, ${mousey}px)`;
        } else {
            circle.style.opacity = '0';   // Hide the circle
        }
    });
});


document.addEventListener('DOMContentLoaded', function () {
    const Enter = document.querySelector('.Enter')
    const monthValue = document.querySelector('.month');
    const deadline = document.querySelector('.Deadline');  
    const deadline1 = document.querySelector('.Deadline1');  
    const deadline2 = document.querySelector('.Deadline2');  
    const deadline3 = document.querySelector('.Deadline3');  
    const deadline4 = document.querySelector('.Deadline4');  
    const deadline5 = document.querySelector('.Deadline5');  
    const deadline6 = document.querySelector('.Deadline6');  
    const deadline7 = document.querySelector('.Deadline7');  
    const deadline8 = document.querySelector('.Deadline8');  
    const deadline9 = document.querySelector('.Deadline9');  
    const deadline10 = document.querySelector('.Deadline10');  
    const deadline11 = document.querySelector('.Deadline11');  
    const deadline12 = document.querySelector('.Deadline12');  
    const deadline13 = document.querySelector('.Deadline13');  
    const deadline14 = document.querySelector('.Deadline14');  
    const deadline15 = document.querySelector('.Deadline15');  
    const deadline16 = document.querySelector('.Deadline16');  
    const deadline17 = document.querySelector('.Deadline17');  
    const deadline18 = document.querySelector('.Deadline18');  
    const deadline19 = document.querySelector('.Deadline19');  
    const deadline20 = document.querySelector('.Deadline20');  
    const deadline21 = document.querySelector('.Deadline21');  
    const deadline22 = document.querySelector('.Deadline22');  
    const deadline23 = document.querySelector('.Deadline23');  
    const deadline24 = document.querySelector('.Deadline24');  
    const deadline25 = document.querySelector('.Deadline25');  
    const deadline26 = document.querySelector('.Deadline26');  
    const deadline27 = document.querySelector('.Deadline27');  
    const deadline28 = document.querySelector('.Deadline28');  
    const deadline29 = document.querySelector('.Deadline29');  
    const deadline30 = document.querySelector('.Deadline30');  
    const deadline31 = document.querySelector('.Deadline31');  
    const deadline32 = document.querySelector('.Deadline32');  
    const deadline33 = document.querySelector('.Deadline33');  
    const deadline34 = document.querySelector('.Deadline34');  
    const deadline35 = document.querySelector('.Deadline35');  
    const deadline36 = document.querySelector('.Deadline36');  

    function monthValueChecker() {
        const monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
        let selectedMonthIndex = monthNames.indexOf(monthValue.value);
        const yearvalue = document.getElementById('year').value
        // Debugging: Check the current value
        console.log("Selected Month:", monthValue.value, "Index:", selectedMonthIndex);
        let nextMonth = monthNames[(selectedMonthIndex + 1) % 12];  // Loop back to Jan after Dec
            return  deadline.value = `5th ${nextMonth}, ${yearvalue}` , 
                    deadline1.value = `To be Adhered on Monthly Basis`,
                    deadline2.value = `31st Mar, ${yearvalue}`,
                    deadline3.value = `5th ${nextMonth}, ${yearvalue}`,
                    deadline4.value = `5th ${nextMonth}, ${yearvalue}`,
                    deadline5.value = `5th ${nextMonth}, ${yearvalue}`,
                    deadline6.value = `11th ${nextMonth}, ${yearvalue}`,
                    deadline7.value = `20th ${nextMonth}, ${yearvalue}`,
                    deadline8.value = `20th ${nextMonth}, ${yearvalue}`,
                    deadline9.value = `14th ${nextMonth}, ${yearvalue}`,
                    deadline10.value = `Half Yearly`,
                    deadline11.value = `As & When Required`,
                    deadline12.value = `31st Dec`,
                    deadline13.value = `1st week of Apr`,
                    deadline14.value = `5th ${nextMonth}, ${yearvalue}`,
                    deadline15.value = `7th ${nextMonth}, ${yearvalue}`,
                    deadline16.value = `31 days from Quarter end`,
                    deadline17.value = `After 15 days of TDS Returns due dates for each quarters`,
                    deadline18.value = `Checked every Quarter`,
                    deadline19.value = `15 days prior to due date`,
                    deadline20.value = `20 days before Each Qtr Ends`,
                    deadline21.value = `15th ${nextMonth}, ${yearvalue}`,
                    deadline22.value = `31th Sep`,
                    deadline23.value = `30th Sep`,
                    deadline24.value = `30th Oct`,
                    deadline25.value = `30th Nov`,
                    deadline26.value = `15th ${nextMonth}, ${yearvalue}`,
                    deadline27.value = `30th Apr after FY Ends`,
                    deadline28.value = `31st July`,
                    deadline29.value = `30th Apr`,
                    deadline30.value = `31st July`,
                    deadline31.value = `As & When Required`,
                    deadline32.value = `As & When Required`,
                    deadline33.value = `As & When Required`;
    }
    // Call the function when the month value changes
    Enter.addEventListener('click', monthValueChecker);
    monthValueChecker();  // Initialize on load if needed

    const sectionHeadings = document.querySelectorAll('.section-heading input[type="checkbox"]');

    sectionHeadings.forEach((checkbox) => {
        // Save the original input values in a data attribute
        const parentRow = checkbox.closest('tr');
        let nextRow = parentRow.nextElementSibling;

        while (nextRow && !nextRow.classList.contains('section-heading')) {
            const inputs = nextRow.querySelectorAll('input');
            inputs.forEach(input => {
                input.dataset.originalValue = input.value;  // Save the original value
            });
            nextRow = nextRow.nextElementSibling;
        }

        checkbox.addEventListener('change', function () {
            const parentRow = this.closest('tr');
            let nextRow = parentRow.nextElementSibling;

            // Loop through all subsequent rows until the next section heading is found
            while (nextRow && !nextRow.classList.contains('section-heading')) {
                const inputs = nextRow.querySelectorAll('input');

                inputs.forEach(input => {
                    if (this.checked) {
                        // Restore the original value when checked
                        input.value = input.dataset.originalValue;
                        input.classList.remove('faded');
                    } else {
                        // Set value to 'NA' when unchecked
                        input.value = 'NA';
                        input.classList.add('faded');
                    }
                });

                nextRow = nextRow.nextElementSibling;
            }
        });

        // Initialize checkbox state on page load
        checkbox.dispatchEvent(new Event('change'));
    });
});



// deadline.forEach(deadline => {
//     deadline.value = `5th ${nextMonth}, ${yearvalue}`;
//     // Debugging: Check each deadline update
//     console.log("Updated Deadline:", deadline.value);
// });
// deadline1.forEach(deadline1 => {
//     deadline1.value = `11th ${nextMonth}, ${yearvalue}`;
//     // Debugging: Check each deadline update
//     console.log("Updated Deadline:", deadline1.value);
// });




// const sectionHeadings = document.querySelectorAll('.section-heading input[type="checkbox"]');

// sectionHeadings.forEach((checkbox) => {
//     checkbox.addEventListener('change', function () {
//         const parentRow = this.closest('tr');
//         let nextRow = parentRow.nextElementSibling;

//         // Loop through all subsequent rows until the next section heading is found
//         while (nextRow && !nextRow.classList.contains('section-heading')) {
//             const inputs = nextRow.querySelectorAll('input');

//             inputs.forEach(input => {
//                 if (this.checked) {
//                     input.value = '';   // Set input value to 'N/A' if the checkbox is checked
//                     input.classList.remove('faded'); // Remove faded appearance if needed
//                 } else {
//                     input.value = 'N/A';  // Clear input value if the checkbox is unchecked
//                     input.classList.add('faded'); // Add faded appearance if needed
//                 }
//             });

//             nextRow = nextRow.nextElementSibling;
//         }
//     });

//     // Initialize checkbox state on page load
//     checkbox.dispatchEvent(new Event('change'));
// });















async function generatePDF() {
    const { jsPDF } = window.jspdf;
    const { autoTable } = window.jspdf;

    // Create a new PDF document
    const doc = new jsPDF();

    // Add company letterhead details
    const companyName = "Tosniwal & Associates";
    const companyAddress = "1, Charuchandra place(east), Kolkata-700033, West Bengal ";
    const companyContact = "Phone: +91-9147053102 | Email: tosniwalandassociates@gamil.com";
    const generatedBy = document.querySelector("#generatedBy")?.value || "";
    const clientName = document.querySelector("#clientName")?.value || "";
    // Add company name
    doc.setFont("times", "bold");
    doc.setFontSize(35);
    doc.setTextColor(33, 37, 41); // Darker shade for the company name
    doc.text(companyName, doc.internal.pageSize.width / 2, 20, { align: "center" });

    // Add company address and contact
    doc.setFont("helvetica", "italic");
    doc.setFontSize(9);
    doc.setTextColor(99, 110, 114); // Lighter grey color for address and contact
    doc.text(companyAddress, doc.internal.pageSize.width / 2, 28, { align: "center" });
    doc.text(companyContact, doc.internal.pageSize.width / 2, 34, { align: "center" });

    // Draw a separator line below the letterhead
    doc.setDrawColor(52, 58, 64); // Dark grey color for the line
    doc.setLineWidth(0.5);
    doc.line(15, 38, 195, 38); // Thicker line

    doc.setFontSize(7);
    doc.text(`Client Name: ${clientName}`, 16, 42);
    doc.text(`Generated By: ${generatedBy}`, 160, 42);
    // Ensure the start position of the table is below the letterhead
    const startYPosition = 45;

    // Get the table element
    const table = document.querySelector("table");

    if (!table) {
        console.error('Table element not found');
        return;
    }
    // Extract table headers
    const headers = [];
    table.querySelectorAll("thead th").forEach(th => {
        headers.push(th.innerText);
    });

    // Extract table rows
    const rows = [];
    table.querySelectorAll("tbody tr").forEach(tr => {
        const row = [];
        tr.querySelectorAll("td").forEach(td => {
            const input = td.querySelector('input');
            if (input) {
                if (input.type === 'checkbox') {
                    row.push(input.checked ? '✔️' : ' ');
                } else {
                    row.push(input.value);
                }
            } else {
                row.push(td.innerText);
            }
        });

        const sectionHeading = tr.classList.contains('section-heading');
        if (sectionHeading) {
            rows.push([tr.innerText.trim(), '', '', '']);
        } else {
            rows.push(row);
        }
    });

    // Add the table to the PDF
    doc.autoTable({
        head: [headers],
        body: rows,
        startY: startYPosition,
        margin: { horizontal: 10 },
        theme: 'grid',
        styles: {
            font: "helvetica", // General font for table
            fontSize: 8,
            lineColor: [0, 0, 0], // Black borders
            lineWidth: 0.2,
        },
        headStyles: {
            fillColor: (19, 24, 66), // Blue color for header background
            textColor: [255, 255, 255], // White text color for headers
            fontSize: 9,
            fontStyle: "bold",
        },
        bodyStyles: {
            fillColor: [245, 245, 245], // Light grey for even rows
        },
        alternateRowStyles: {
            fillColor: [255, 255, 255], // White for odd rows
        },
        willDrawCell: (data) => {
            if (data.section === 'body') {
                const cellContent = data.cell.raw || ''; // Ensure cellContent is at least an empty string
                const isSectionHeading = cellContent.startsWith('1.') || 
                cellContent.startsWith('2.') || 
                cellContent.startsWith('3.') || 
                cellContent.startsWith('4.') || 
                cellContent.startsWith('5.') || 
                cellContent.startsWith('6.') || 
                cellContent.startsWith('7.') || 
                cellContent.startsWith('8.') || 
                cellContent.startsWith('9.');
                
                if (isSectionHeading) {
                    // Apply style for section headings
                    doc.setFillColor(230, 131, 105); // Light blue background
                    doc.setTextColor(0, 0, 0); // Black text color
                    doc.setFont("helvetica", "bold");
                    doc.setFontSize(8);
                } else {
                    // Reset styles for normal rows
                    doc.setFillColor(251, 246, 226);
                    doc.setTextColor(19, 24, 66); // Black text color
                    doc.setFont("helvetica", "normal");
                }
            }
        }
    });

    const footerText = "Confidential and Proprietary. © 2024 Tosniwal & Associates. All rights reserved.";
    const pageCount = doc.internal.getNumberOfPages();
    
    for (let i = 1; i <= pageCount; i++) {
        doc.setPage(i);
        doc.setFontSize(5);
        doc.setFont("helvetica", "italic");
        doc.text(footerText, 10, doc.internal.pageSize.height - 5); // Left-aligned footer text
        doc.text(`Page ${i} of ${pageCount}`, doc.internal.pageSize.width - 10, doc.internal.pageSize.height - 5, { align: "right" }); // Right-aligned page number
    }
    // Save the generated PDF
    doc.save("Compliance_Report.pdf");
}